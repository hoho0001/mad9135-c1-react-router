{"version":3,"sources":["img/UserIcon.svg","components/Loading.js","RouterApiService.js","components/AppHeader.js","components/UserDetail.js","components/UserCard.js","components/Users.js","components/AlbumCard.js","components/Albums.js","components/AlbumsUser.js","components/PostCard.js","components/Posts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","component","className","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","RouterApiService","this","baseUrl","options","headers","uri","fetch","then","sleeper","response","ok","json","Promise","reject","status","statusText","fetchJson","id","user","ms","x","resolve","setTimeout","AppHeader","props","title","rapi","UserDetail","getData","userId","getUser","data","setState","loading","catch","error","componentDidMount","state","userJsx","name","username","email","phone","website","company","address","suit","street","city","zipcode","to","style","padding","React","Component","UserCard","src","icon","Users","list","map","key","AlbumCard","album","Albums","buildList","match","params","getUserAlbums","getAlbums","componentDidUpdate","console","log","albumJsx","PostCard","post","body","Posts","getUserPosts","getPosts","postJsx","App","getUsers","exact","path","render","userPosition","location","pathname","replace","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9b1e7b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/UserIcon.064cda83.svg\";","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nimport './Loading.css'\n\nfunction Loading() {\n  return (\n    <CSSTransitionGroup component=\"div\" className=\"Loading\"\n        transitionName=\"fade\"\n        transitionAppear={true}\n        transitionAppearTimeout={1200}\n        transitionEnterTimeout={1250}\n        transitionLeaveTimeout={1225}>\n        <div className=\"Loading\">\n      Loading ... \n     </div>\n      </CSSTransitionGroup>\n    // <div className=\"Loading\">\n    //   Loading ... \n    // </div>\n  );\n}\n\nexport default Loading;","class RouterApiService {\n\n  constructor () {\n    this.baseUrl = 'https://jsonplaceholder.typicode.com'\n    this.options = {\n      headers: {\n        'Accept': 'application/json; charset=utf-8'\n      }\n    }\n  }\n  \n  async fetchJson(uri, options = {}) {\n    try {\n      const response = await fetch(`${this.baseUrl}${uri}`, { ...this.options, ...options })  //merge two objects\n      .then (this.sleeper(1000))   //delay time to show Loading\n      if (response.ok) {\n        return await response.json()\n      }\n      return Promise.reject(`${response.status}: ${response.statusText}`)\n    } catch (err) { \n      return Promise.reject('The fetch request failed ' + err)\n    }\n  }\n\n  getUsers () {\n    return this.fetchJson(`/users`)\n  }\n  getUser (id) {\n    return this.fetchJson(`/users/${id}`)\n  }\n\n  getAlbums () {\n      return this.fetchJson(`/albums`)\n    \n  }\n  getUserAlbums (user) {\n      return this.fetchJson(`/albums?userId=${user}`)\n  }\n\n  getPosts () {\n      return this.fetchJson(`/posts`)\n  }\n\n  getUserPosts (user) {\n    return this.fetchJson(`/posts?userId=${user}`)\n}\n  sleeper(ms) {\n    return function(x) {\n      return new Promise(resolve => setTimeout(() => resolve(x), ms));\n    };\n  }\n}\n\nexport default RouterApiService","// Lien Ho Hoang - 2019-10-19\nimport React from \"react\";\nimport './AppHeader.css';\n\n\nfunction AppHeader (props) {\n  return (\n    <header className=\"App-header\">\n      <h1>{props.title}</h1>{\" \"}\n    </header>\n  );\n}\n\nexport default AppHeader","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\nimport Loading from './Loading'\nimport { NavLink } from 'react-router-dom'\n\nimport RouterApiService from '../RouterApiService'\nimport AppHeader from './AppHeader'\n\nconst rapi = new RouterApiService()\n\nclass UserDetail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      loading: true,\n      error: null\n    }\n  }\n\n  getData = () => {\n    if (this.props.userId) {\n      rapi.getUser(this.props.userId)\n        .then(data => this.setState({ user: data, loading: false }))\n        .catch(error => this.setState({ error, loading: false }))\n    }\n  }\n\n  componentDidMount = () => {\n    this.getData()\n  }\n\n\n  render() {\n    const userJsx = this.state.loading ? <Loading /> :\n      <div className=\"UserDetail\">\n        <div className=\"card-body\">\n          <p className=\"user-name\">\n            {this.state.user.name}\n            <br />\n          </p>\n          <p className=\"\">Username: <b>{this.state.user.username}</b></p>\n          <p className=\"\">Email: <b>{this.state.user.email}</b></p>\n          <p className=\"\">Phone: <b>{this.state.user.phone}</b></p>\n          <p className=\"\">Website: <b>{this.state.user.website}</b></p>\n          <p className=\"\">Company name: <b>{this.state.user.company.name}</b></p>\n          <p className=\"\">Address: <b>{this.state.user.address.suit} {this.state.user.address.street}, {this.state.user.address.city}, {this.state.user.address.zipcode}</b></p>\n          <br></br>\n          <div><NavLink className=\"link\" to={`/users/posts/${this.state.user.id}`} >\n            <button className=\"button\">View Posts</button> </NavLink>\n            <NavLink className=\"link\" to={`/users/albums/${this.state.user.id}`} >\n            <button className=\"button\">View Albums</button> </NavLink></div>\n        </div>\n\n      </div>\n\n    return (\n      <div>\n        <AppHeader title=\"USERS\" />\n        <div className=\"Profile\" style={{ padding: \"1rem\" }}>\n          {userJsx}\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nexport default UserDetail","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nimport './UserCard.css'\nimport icon from '../img/UserIcon.svg'\n\nfunction UserCard(props) {\n  return (\n    <CSSTransitionGroup component=\"div\" className=\"CardList\"\n        transitionName=\"fade\"\n        transitionAppear={true}\n        transitionAppearTimeout={1200}\n        transitionEnterTimeout={1250}\n        transitionLeaveTimeout={1225}>\n<NavLink className=\"link\" to={`/users/${props.user.id}`} >\n      <div className=\"UserCard\">\n        <div className=\"user-avatar\">\n          <img src={icon}></img>\n        </div>\n        <div className=\"card-body\" >\n          <p className=\"user-name\">\n            {props.user.name}\n            <br />\n          </p>\n          <p className=\"user-login\">{props.user.username}</p>\n          <p className=\"user-email\">{props.user.email}</p>\n        </div>\n      </div>\n    </NavLink>    \n    </CSSTransitionGroup>\n  );\n}\n\nexport default UserCard;","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\nimport { CSSTransitionGroup } from 'react-transition-group'\nimport AppHeader from './AppHeader'\nimport UserCard from './UserCard'\nimport Loading from './Loading'\n\n\nfunction Users(props) {\n\n  const userJsx = props.loading ? <Loading /> : props.list.map(user => (\n    <UserCard\n      key={user.id}\n      user={user}\n    />\n  ));\n\n  return (\n    <div>\n      <AppHeader title=\"USERS\" />\n      <CSSTransitionGroup component=\"div\" className=\"CardList\"\n        transitionName=\"fade\"\n        transitionAppear={true}\n        transitionAppearTimeout={1200}\n        transitionEnterTimeout={1250}\n        transitionLeaveTimeout={1225}>\n        {userJsx}\n      </CSSTransitionGroup>\n      {/* <main className=\"ProfileList\" style={{ padding: \"1rem\" }}>\n        {userJsx}\n      </main> */}\n    </div>\n  )\n}\n\n\nexport default Users","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\n\nfunction AlbumCard(props) {\n  return (\n    <div className=\"UserCard\">\n      <div className=\"card-body\">\n        <p className=\"user-name\">\n          {props.album.title}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default AlbumCard;","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nimport AppHeader from './AppHeader'\nimport AlbumCard from './AlbumCard'\nimport Loading from './Loading'\n\nimport RouterApiService from '../RouterApiService'\n\nconst rapi = new RouterApiService()\n\nclass Albums extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [],\n      id: '',\n      loading: true,\n      error: null\n    }\n  }\n  buildList = (data) => {\n    // console.log(JSON.stringify(data), null, '\\t');\n    this.setState({\n      list: data,\n      id: this.props.match.params.userId,\n      loading: false,\n      error: null\n    })\n  }\n\n  getData = () => {\n    let getAlbumList = (this.props.match.params.userId) ? rapi.getUserAlbums(this.props.match.params.userId) : rapi.getAlbums()\n    getAlbumList\n    .then(data => this.buildList(data))\n    .catch(error => this.setState({error}))\n  }\n\n  componentDidMount =  () => {\n    this.getData()   \n  }\n\n  componentDidUpdate = () => {\n\n    if (this.props.match.params.userId !== this.state.id) \n    {\n      console.log('didUpdate')\n      this.getData()\n    }\n  }\n\n  render() {\n\n    const albumJsx = this.state.loading? <Loading /> :this.state.list.map(album => (\n      <AlbumCard\n        key={album.id}\n        album={album}\n      />\n    ));\n    return (\n      <div>\n        <AppHeader title=\"ALBUMS\" />\n        <CSSTransitionGroup component=\"div\" className=\"CardList\"\n        transitionName=\"fade\"\n        transitionAppear={true}\n        transitionAppearTimeout={1200}\n        transitionEnterTimeout={1250}\n        transitionLeaveTimeout={1225}>\n        {albumJsx}\n      </CSSTransitionGroup>\n        {/* <main className=\"AlbumList\" style={{ padding: \"1rem\" }}>\n          {albumJsx}\n        </main> */}\n        \n        {this.state.error &&\n          <h3>{this.state.error}</h3>\n        }\n      </div>\n    )\n  }\n}\n\nexport default Albums","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\nimport AppHeader from './AppHeader'\nimport AlbumCard from './AlbumCard'\nimport Loading from './Loading'\n\nimport RouterApiService from '../RouterApiService'\n\nconst rapi = new RouterApiService()\n\nclass AlbumsUser extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [],\n      loading: true,\n      error: null\n    }\n  }\n  buildList = (data) => {\n    // console.log(JSON.stringify(data), null, '\\t');\n    this.setState({\n      list: data,\n      loading: false,\n      error: null\n    })\n  }\n\n  componentDidUpdate = async () => {\n    \n    \n  } \n\n  componentDidMount = async () => {\n    this.buildList(await rapi.getAlbums())\n    console.log(\"didmount\")\n\n   \n    // const uri = (this.props.match.params.user)?`?userId=${this.props.match.params.user}`:``\n    // const url = `https://jsonplaceholder.typicode.com/albums${uri}`\n    // fetch (url)\n    // .then(this.sleeper(1000))\n    // .then (response => response.json())\n    // .then(this.buildList)\n    // .catch(error => { this.setState({error})})\n  }\n\n  sleeper(ms) {\n    return function(x) {\n      return new Promise(resolve => setTimeout(() => resolve(x), ms));\n    };\n  }\n\n  render() {\n\n    const albumJsx = this.state.loading? <Loading /> :this.state.list.map(album => (\n      <AlbumCard\n        key={album.id}\n        album={album}\n      />\n    ));\n    return (\n      <div>\n        <AppHeader title=\"ALBUMS - USER\" />\n        <main className=\"AlbumList\" style={{ padding: \"1rem\" }}>\n          {albumJsx}\n        </main>\n        \n        {this.state.error &&\n          <h3>{this.state.error}</h3>\n        }\n      </div>\n    )\n  }\n}\n\nexport default AlbumsUser","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\n\nfunction PostCard(props) {\n  return (\n    <div className=\"UserCard\">\n      <div className=\"card-body\">\n        <p className=\"user-name\">\n          {props.post.title}\n        </p>\n        <p>{props.post.body}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default PostCard;","// Lien Ho Hoang - 2019-10-19\nimport React from 'react'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nimport AppHeader from './AppHeader'\nimport PostCard from './PostCard'\nimport Loading from './Loading'\nimport RouterApiService from '../RouterApiService'\n\nconst rapi = new RouterApiService()\n\nclass Posts extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [],\n      id: '',\n      loading: true,\n      error: null\n    }\n  }\n  buildList = (data) => {\n    // console.log(JSON.stringify(data), null, '\\t');\n    this.setState({\n      list: data,\n      id: this.props.match.params.userId,\n      loading: false,\n      error: null\n    })\n  }\n\n  getData = () => {\n    let getPostList = (this.props.match.params.userId) ? rapi.getUserPosts(this.props.match.params.userId) : rapi.getPosts()\n    getPostList\n    .then(data => this.buildList(data))\n    .catch(error => this.setState({error}))\n  }\n\n  // getData1 = () => {\n  //   const uri = (this.props.match.params.userId)?`?userId=${this.props.match.params.userId}`:``\n  //   // const uri = (this.props.location.userId)?`?userId=${this.props.location.userId}`:``\n  //   // console.log(uri)\n  //   const url = `https://jsonplaceholder.typicode.com/posts${uri}`\n  //   fetch (url)\n  //   .then(rapi.sleeper(1000))\n  //   .then (response => response.json())\n  //   .then(data => {\n  //     this.buildList(data)\n  //   })\n  //   .catch(error => { this.setState({error})})\n  // }\n  componentDidMount =  () => {\n    // this.buildList(await rapi.getUsers())\n    this.getData()\n  }\n\n  componentDidUpdate = () => {\n\n    if (this.props.match.params.userId !== this.state.id) \n    {\n      console.log('didUpdate')\n      this.getData()\n    }\n  }\n\n  render() {\n    const postJsx = this.state.loading? <Loading /> :this.state.list.map(post => (\n      <PostCard\n        key={post.id}\n        post={post}\n      />\n    ));\n    return (\n      <div>\n        <AppHeader title=\"POSTS\" />\n        <CSSTransitionGroup component=\"div\" className=\"CardList\"\n        transitionName=\"fade\"\n        transitionAppear={true}\n        transitionAppearTimeout={1200}\n        transitionEnterTimeout={1250}\n        transitionLeaveTimeout={1225}>\n        {postJsx}\n      </CSSTransitionGroup>\n        {/* <main className=\"PostList\" style={{ padding: \"1rem\" }}>\n          {postJsx}\n        </main> */}\n        \n        {this.state.error &&\n          <h3>{this.state.error}</h3>\n        }\n      </div>\n    )\n  }\n}\n\nexport default Posts","// Lien Ho Hoang - 2019-10-19\nimport React from 'react';\nimport { BrowserRouter, Route, NavLink, Switch } from 'react-router-dom'\nimport UserDetail from './components/UserDetail'\nimport Users from './components/Users'\nimport Albums from './components/Albums'\nimport AlbumsUser from './components/AlbumsUser'\nimport Posts from './components/Posts'\nimport RouterApiService from './RouterApiService'\n\nimport './App.css'\n\n\nconst rapi = new RouterApiService()\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [],\n      loading: true,\n      error: null\n    }\n  }\n\n  getData = () => {\n    rapi.getUsers()\n      .then(data => this.setState({ list: data, loading: false }))\n      .catch(error => this.setState({ error, loading: false }))\n  }\n\n  componentDidMount = () => {\n    this.getData()\n  }\n  \n  render() {\n\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <nav className=\"Navigation\">\n            <NavLink to='/users' className=\"Navigation\">Users</NavLink>\n            <NavLink to={`/posts`} className=\"Navigation\">Posts</NavLink>\n            <NavLink to={`/albums`} >Albums</NavLink>\n          </nav>\n\n\n          <Switch>\n            <Route exact path='/users' render={(props) => (<Users list={this.state.list} loading={this.state.loading} />)} />\n\n            <Route exact path='/users/:userId' render={(props) => {\n              let userPosition = props.location.pathname.replace('/users/', '')\n              console.log(userPosition)\n              return (\n                <UserDetail userId={userPosition} />\n              )\n            }}\n            />\n\n\n            <Route exact path='/posts' component={Posts} />\n            <Route exact path='/users/posts/:userId' component={Posts} />\n            <Route exact path='/albums' component={Albums} />\n            <Route path='/users/albums/:userId' component={Albums} />\n            <Route exact path='/' render={(props) => (<Users list={this.state.list} loading={this.state.loading} />)} />\n\n          </Switch>\n        </div>\n\n      </BrowserRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}